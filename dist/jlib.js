(()=>{var t={294:function(t,e,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(t,e,r,n){void 0===n&&(n=r),Object.defineProperty(t,n,{enumerable:!0,get:function(){return e[r]}})}:function(t,e,r,n){void 0===n&&(n=r),t[n]=e[r]}),i=this&&this.__exportStar||function(t,e){for(var r in t)"default"===r||Object.prototype.hasOwnProperty.call(e,r)||n(e,t,r)};Object.defineProperty(e,"__esModule",{value:!0}),i(r(143),e),i(r(746),e),i(r(268),e),i(r(764),e)},746:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.navigation=void 0,e.navigation=class{static getURL(){return document.location}static openURL(t){window.location.href=t}static reloadPage(){window.location.reload()}static domain(){return window.location.protocol+"//"+window.location.hostname+(window.location.port?":"+window.location.port:"")}}},143:(t,e)=>{"use strict";function r(t,e,r,n){let i,o,s,a,l,c,u,f;if(i=(t=Math.round(t*Math.pow(10,e))/Math.pow(10,e))+"",o=i.split("."),o[0]||(o[0]="0"),o[1]||(o[1]=""),o[1].length<e){for(s=o[1],a=o[1].length+1;a<=e;a++)s+="0";o[1]=s}if(""!=n&&(o[0].length>3&&o[0]>0||o[0].length>4&&o[0]<0)){for(c=o[0],o[0]="",l=3;l<c.length;l+=3)u=c.slice(c.length-l,c.length-l+3),o[0]=n+u+o[0]+"";f=c.substr(0,c.length%3==0?3:c.length%3),o[0]=f+o[0]}return o[0]+r+o[1]}Object.defineProperty(e,"__esModule",{value:!0}),e.cfloat=e.cdate=e.number_format_de=e.number_format=void 0,e.number_format=r,e.number_format_de=function(t){return r(t,2,",",".")},e.cdate=function(t){if(t instanceof Date)return t;if("string"==typeof t){if(t.indexOf(".")>0){var e=t.split(".");return t=e[2]+"-"+("00"+e[1]).slice(-2)+"-"+("00"+e[0]).slice(-2),new Date(t)}if(t.indexOf("-")>0)return e=t.split("-"),t=e[0]+"-"+("00"+e[1]).slice(-2)+"-"+("00"+e[2]).slice(-2),new Date(t)}else(isNaN(t)||null==t)&&(t="0000-00-00");return new Date(t)},e.cfloat=function(t){if("string"==typeof t)t=(t=t.replace(".","")).replace(",","."),t=parseFloat(t),isNaN(t)&&(t=0);else{if(isNaN(t))return 0;if(void 0===t)return 0;if(null===t)return 0}return t}},764:()=>{},268:()=>{$("#myform").submit((function(){return $(".input-euro").each((function(){str=$(this).val(),str=str.replace(".",""),str=str.replace(" ",""),str=str.replace(",","."),$(this).val(str)})),$(".input-percent").each((function(){str=$(this).val(),str=str.replace(".",""),str=str.replace(" ",""),str=str.replace(",","."),$(this).val(str)})),$(".input-int").each((function(){str=$(this).val(),str=str.replace(".",""),str=str.replace(" ",""),str=str.replace(",","."),$(this).val(str)})),$(".input-number").each((function(){str=$(this).val(),str=str.replace(".",""),str=str.replace(" ",""),str=str.replace(",","."),$(this).val(str)})),!0}))}},e={};!function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,r),o.exports}(294)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,